#!/bin/bash --
#
# Shell script to query the WikIME.
#
# It can be used to output WikIME articles to the console, but can also
# just open the article in any browser.
# 
# Original author: Christian Brabandt <cb@256bit.org>
# edited by: Andre ASA
VERSION=0.14

set -e

function display_help() { #{{{1
cat << EOF
WIKIME-CLI

    Essa script usa navegadores de internet TUI (terminal UI) para  pesquisar  e
    renderizar artigos do WikIME. O resultado será imprimido para a saída padrão

SINOPSE
    `basename $0` [-BCnNoOpPsSuU] [-b prog] [-c patt] [-i patt] [-l lang]
                   [-X browseroptions] query
    `basename $0` -o [-b prog] [-l lang] query
    `basename $0` [-h]
    `basename $0` -v|-r

    -n  não use cores            - N  cores simples (alias -C)
    -p  display using a pager    - P  não use PAGER
    -o  abra artigo no navegador - O  não abra no navegador
    -s  exibe somente resumo     - S  exibe artigo inteiro
    -u  imprime URL da query     - U  abra URL no navegador
    -v  exibe versão             - h  exibe ajuda
    -t  exibe todas seções disponíveis

    -r           abra página aleatória
    -d           modo debug
    -i patt      padrão de cores (caso sensitivo)
    -I patt      padrão de cores (case-sensitive, alias -c)
    -b prog      use prog como navegador (navegador padrão invocados são elinks,
                 links2, links, lynx or w3m, se existirem)
    -T custom    imprime seção customizada (qualquer coisa em html h2 tag)
    -W url       use url como URL base para WikIME (em outras palavras, use uma
                 Wiki diferente. Pesquisar nesse URL será feito acrescentando o
                 termo de pesquisa no URL)
    -X "options" opções para passar para o navegador
                 (aviso: deve ser em aspas duplo, específico por navegador)

    O termo de pesquisa pode ser qualquer termo.  A script irá  tomar  conta  de
    caracteres especiais. Observe que somente um termo de pesquisa é aceito, mas
    essse termo pode consistir de várias palavras.

    A configuração pode ser controlada criando um arquivo de chamado .`basename $0`rc
    no seu diretório home.

    Observe que quando pedir  para  abrir  o  artigo  em  um  navegador,  outros
    paramêtros serão ignorados. O mesmo vale para as opções -h e -v.
EOF
}

function getVersion() { #{{{1
cat <<EOF
  $(basename "${0}") Version: ${VERSION}
EOF
}

function errorExit() { #{{{1
  echo "$*" >&2
  exit 3
}

function colorize() { #{{{1
if [ "${IGNCASE}" = "true" ]; then
  OUTPUT=$(echo -e "`cat`"|sed -s "s|\(${PATT}\)|\\\033\[0;31m\1\\\033\[0m|gi")
else
  OUTPUT=$(echo -e "`cat`"|sed -s "s|\(${PATT}\)|\\\033\[0;31m\1\\\033\[0m|g")
fi
echo -e "${OUTPUT}"
}

function uri_decode() { #{{{1
  echo -e "$*" | perl -MURI::Escape -lne 's/ /_/g;s/"//g;print uri_escape($_);'
}

function localize() { #{{{1
  MARKER='^\s*Categorias:'
  MARKER2='editar'
  RANDOMP='Especial:Random'
}

function stripOutput() { #{{{1
# Now comes the magic: Strip everything from Marker to end,
# cause this is only the linkdump
SED='sed -e "s|\^\?\\[[0-9]*\\]||g" -e "s|\\[IMG\\]||g" -e "/${MARKER}/,$ D" '
if [ -n "${MARKER2}" ]; then
  echo "`cat`"| eval ${SED} -e '"s#\[${MARKER2}\]##g"'
else
  echo "`cat`"| eval ${SED}
fi
}

function openurl() { #{{{1
  "${BROWSER}" "${URL}"
}

function summary()  { #{{{1
  TMPFILE="/tmp/wiki-sum_$$.html"
  if [ "${COLOR}" = "true" ]; then
    summaryCommand="curl -s -L ${URL} | grep \/table -A400 | grep -v \/table  |
      grep \<div -m1 -B400 | sed -e \"\$ d\" > $TMPFILE && w3m -dump $TMPFILE |
      stripOutput | colorize && rm $TMPFILE"
  else
    summaryCommand="curl -s -L ${URL} | grep \/table -A400 | grep -v \/table  |
      grep \<div -m1 -B400 | sed -e \"\$ d\" > $TMPFILE && w3m -dump $TMPFILE |
      stripOutput && rm $TMPFILE"
  fi
  eval ${summaryCommand}
}

function print_sections()  { #{{{1
  TMPFILE="/tmp/wiki-sections_$$.html"
  Command="curl -s -L ${URL} | grep '\(</\?html\)\|\(</\?body\)\|\(<h[12]\)' |
    sed -e 's/^.*<h2/<h2/' > $TMPFILE && w3m -dump $TMPFILE |
    stripOutput && rm $TMPFILE"
  eval ${Command}
}

function print_section_detail()  { #{{{1
  TMPFILE="/tmp/wiki-section_$$.html"
  Command="curl -s -L ${URL} |
    sed -n -e '/\(<\/\?html\)\|\(<\/\?body\)\|\(<h1\)/p' -e \"/^.*<h2.*$*/,/^.*<\/h2.*>/p\" |
    sed -e 's/^.*<h2/<h2/' > $TMPFILE && w3m -dump $TMPFILE | stripOutput"
  if [ "${COLOR}" = "true" ]; then
    eval "${Command} | colorize"
  else
    eval "${Command}"
  fi
  rm $TMPFILE
}

function getInfo() { #{{{1
  getInfoCommand="${BROWSER} ${BROWSEROPTIONS} -dump ${URL} | stripOutput"
  if [ "${COLOR}" = "true" ]; then
    getInfoCommand="${getInfoCommand} | colorize"
  fi
  eval ${getInfoCommand}
}

function filterInfo() {
  pattern='Menu de navegação'
  sed -n "
    1,/$pattern/ {
      /$pattern/n # skipp pattern
      p           # print lines from 1 untill pattern
    }
  " < /dev/stdin
}

# First read in the Run configuration File, if one is found #{{{1
if [ -r ~/.`basename $0`rc ]; then
  source ~/.`basename $0`rc
  ABROWSER=${BROWSER}
fi

# Process commandline parameters {{{1
while getopts "BCdnNoOpPsStuvhrUl:b:c:i:I:B:T:W:X:-help" ARGS
  do
  case ${ARGS} in
    b) ABROWSER=${OPTARG} ;;
    d) DEBUG="true" ;;
    B) ABROWSER='' ;;
    c) IGNCASE="false";COLOR="true"; PATT=${OPTARG} ;;
    C) COLOR="true" ;;
    i) IGNCASE="true";COLOR="true"; PATT=${OPTARG} ;;
    I) IGNCASE="false";COLOR="true"; PATT=${OPTARG} ;;
    l) LOCAL=${OPTARG} ;;
    n) COLOR="false" ;;
    N) COLOR="true" ;;
    o) USEBROWSER="true" ;;
    O) USEBROWSER="false" ;;
    p) PAGER="true" ;;
    P) PAGER="false" ;;
    r) RAND="true" ;;
    s) SHORT="true" ;;
    S) SHORT="false" ;;
    t) SECTION="show" ;;
    T) SECTION=$OPTARG ;;
    u) OUTPUTURL="true" ;;
    U) OPENURL="true";;
    v) getVersion; exit 0 ;;
    W) WURL=${OPTARG} ;;
    X) BROWSEROPTIONS=${OPTARG} ;;
    h) display_help; exit 0 ;;
    -help) display_help; exit 0 ;;
    *) display_help; exit 1 ;;
  esac
done

shift `expr ${OPTIND} - 1`

# init some variables {{{1
localize

# Setting Up some Variables, to determine, what actually to do
if [ -z "$1"  -a  -z "${RAND}" ]; then
  display_help
  exit 1;
fi

IGNCASE=$(echo ${IGNCASE:="false"})
PAGER=$(echo ${PAGER:="false"})
OPENURL=$(echo ${OPENURL:="false"})
RAND=$(echo ${RAND:="false"})

if [ "$PAGER" = "true" ]; then
  { PAGER=$(which less) || PAGER=$(which more) ; } || errorExit "Nenhum PAGER encontrado" ;
fi

PAGER=$(echo ${PAGER/less/less -Rr})
COLOR=$(echo ${COLOR:="false"})

if [ "$COLOR" = "true" -a -z "${PATT}" ]; then
  PATT="$*"
fi

if [ "$OPENURL" = "true" ]; then
  URL="$*"
fi

# Check for Alternative Browser
if [ -n "${ABROWSER}" ]; then
  BROWSER=$(which "${ABROWSER}") ||  errorExit "${ABROWSER} não encontrado"
# fall back to supported browsers
else
  { BROWSER=$(which w3m) ||
    BROWSER=$(which elinks) ||
    BROWSER=$(which links2) ||
    BROWSER=$(which lynx) ||
    BROWSER=$(which links.main) ||
    BROWSER=$(which links) ; } || errorExit "Navegador não encontrado"
fi

# Open page in Browser?
USEBROWSER=$(echo ${USEBROWSER:="false"})

# Output only a summary?
SHORT=$(echo ${SHORT:="false"})

# custom Section
SECTION=$(echo ${SECTION:=""})

# Output only the URL?
OUTPUTURL=$(echo ${OUTPUTURL:="false"})

# Now we do some input sanitizing. {{{1
ARGUMENT="$(uri_decode "$*")"
LOCAL="$(echo "${LOCAL}"|tr '[:upper:]' '[:lower:]')"
# Random page?
if [ "${RAND}" = "true" ]; then
  ARGUMENT="$(uri_decode "${RANDOMP}")"
fi
if [ -z "${URL}" ]; then
  URL="http://wikime.linux.ime.usp.br/index.php/${ARGUMENT}"
fi

if [ -n "${WURL}" ]; then
  WURL="$(echo "${WURL%%/}")"
  case "${WURL}" in
    http://*) URL="${WURL}"/wiki/"${ARGUMENT}" ;;
    *) URL="http://""${WURL}"/wiki/"${ARGUMENT}" ;;
  esac;
  # unset $LOCAL to force using an english-locale
  # this is used to strip the tags [edit], eg.
  LOCAL="en"
fi

# Debug mode? {{{1
if [ "${DEBUG:=false}" = "true" ]; then 
  printf "PAGER: $PAGER Browser: $BROWSER Local: $LOCAL COLOR: $COLOR PATT: $PATT IGNCASE: $IGNCASE URL: $URL Summary: $SHORT\n"
fi

# Depending on some Variables, we do some different things here {{{1
if [ "${USEBROWSER}" = "true" ]; then
  openurl
  exit 0;
fi

if [ "${SHORT}" = "true" ]; then
  summary
  exit 0;
fi

if [ "${SECTION}" = "show" ]; then
  print_sections
  exit 0;
elif [ -n "${SECTION}" ]; then
  print_section_detail ${SECTION}
  exit 0;
fi

if [ "${OUTPUTURL}" = "true" ]; then
  if [ "${COLOR}" = "false" ]; then
    echo "${URL}"
    echo "${BROWSER}" "${BROWSEROPTIONS}" -dump "${URL}"
  else
    echo -e "\033[0;34m${URL}\033[0m"
  fi
  exit 0;
fi

if [ "$PAGER" != "false" ]; then
  getInfo | filterInfo | ${PAGER}
else
  getInfo | filterInfo
fi

# Vim Modeline {{{1
# vim: ft=sh et sts=-1 sw=0 ts=2
